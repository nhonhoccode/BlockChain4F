import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Typography,
  Grid,
  Button,
  Card,
  CardContent,
  CardMedia,
  CardActions,
  TextField,
  InputAdornment,
  Divider,
  Paper,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Chip,
  Stack,
  Avatar,
  IconButton,
  useTheme,
  useMediaQuery
} from '@mui/material';
import {
  Search as SearchIcon,
  ArrowForward as ArrowIcon,
  AccessTime as TimeIcon,
  Description as DocumentIcon,
  Assignment as AssignmentIcon,
  Info as InfoIcon,
  Notifications as NotificationIcon,
  VerifiedUser as VerifiedIcon,
  Star as StarIcon,
  StarBorder as StarBorderIcon,
  FilterList as FilterIcon,
  People as PeopleIcon,
  Home as HomeIcon,
  AssignmentInd as IdentityIcon,
  Business as BusinessIcon,
  Apartment as ApartmentIcon,
  School as SchoolIcon,
  DirectionsCar as CarIcon,
  HealthAndSafety as HealthIcon,
  AccountBalance as GovernmentIcon
} from '@mui/icons-material';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../../contexts/AuthContext';
import { procedureCategories, procedures } from './procedureData';

// ƒê·ªãnh nghƒ©a c√°c nh√≥m th·ªß t·ª•c v·ªõi icon ph√π h·ª£p
const procedureGroups = [
  { id: 'civil', name: 'H·ªô t·ªãch - D√¢n s·ª±', icon: <PeopleIcon sx={{ fontSize: 40 }} />, color: '#2196f3', bgColor: '#e3f2fd' },
  { id: 'residence', name: 'C∆∞ tr√∫', icon: <HomeIcon sx={{ fontSize: 40 }} />, color: '#4caf50', bgColor: '#e8f5e9' },
  { id: 'identity', name: 'CCCD - CMND', icon: <IdentityIcon sx={{ fontSize: 40 }} />, color: '#f44336', bgColor: '#ffebee' },
  { id: 'land', name: 'ƒê·∫•t ƒëai - Nh√† ·ªü', icon: <ApartmentIcon sx={{ fontSize: 40 }} />, color: '#ff9800', bgColor: '#fff3e0' },
  { id: 'business', name: 'Kinh doanh', icon: <BusinessIcon sx={{ fontSize: 40 }} />, color: '#9c27b0', bgColor: '#f3e5f5' },
  { id: 'education', name: 'Gi√°o d·ª•c', icon: <SchoolIcon sx={{ fontSize: 40 }} />, color: '#009688', bgColor: '#e0f2f1' },
  { id: 'transportation', name: 'Giao th√¥ng', icon: <CarIcon sx={{ fontSize: 40 }} />, color: '#795548', bgColor: '#efebe9' },
  { id: 'health', name: 'Y t·∫ø - B·∫£o hi·ªÉm', icon: <HealthIcon sx={{ fontSize: 40 }} />, color: '#3f51b5', bgColor: '#e8eaf6' },
  { id: 'other', name: 'Th·ªß t·ª•c kh√°c', icon: <GovernmentIcon sx={{ fontSize: 40 }} />, color: '#607d8b', bgColor: '#eceff1' }
];

// ƒê·ªãnh nghƒ©a c√°c th·ªß t·ª•c ph·ªï bi·∫øn
const popularProcedures = [
  { id: 'birth_registration', name: 'ƒêƒÉng k√Ω khai sinh', category: 'civil', icon: 'üë∂' },
  { id: 'new_id_card', name: 'C·∫•p m·ªõi CCCD', category: 'identity', icon: 'ü™™' },
  { id: 'marriage_registration', name: 'ƒêƒÉng k√Ω k·∫øt h√¥n', category: 'civil', icon: 'üíç' },
  { id: 'land_certificate', name: 'C·∫•p GCN quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t', category: 'land', icon: 'üèûÔ∏è' },
  { id: 'business_registration', name: 'ƒêƒÉng k√Ω kinh doanh h·ªô c√° th·ªÉ', category: 'business', icon: 'üè™' },
  { id: 'permanent_residence', name: 'ƒêƒÉng k√Ω th∆∞·ªùng tr√∫', category: 'residence', icon: 'üè†' }
];

/**
 * PublicProceduresPage - Trang hi·ªÉn th·ªã t·∫•t c·∫£ c√°c th·ªß t·ª•c h√†nh ch√≠nh cho ng∆∞·ªùi d√¢n
 */
const PublicProceduresPage = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredProcedures, setFilteredProcedures] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.down('md'));

  // ƒê·ªçc tham s·ªë danh m·ª•c t·ª´ URL khi t·∫£i trang
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const categoryParam = params.get('category');
    if (categoryParam && procedureGroups.some(group => group.id === categoryParam)) {
      setSelectedCategory(categoryParam);
      setTimeout(() => {
        document.getElementById('all-procedures')?.scrollIntoView({ behavior: 'smooth' });
      }, 300);
    }
  }, [location.search]);

  // X·ª≠ l√Ω t√¨m ki·∫øm
  useEffect(() => {
    if (searchQuery) {
      const results = [];
      Object.keys(procedures).forEach(category => {
        procedures[category].forEach(procedure => {
          if (
            procedure.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            procedure.description.toLowerCase().includes(searchQuery.toLowerCase())
          ) {
            results.push({ ...procedure, category });
          }
        });
      });
      setFilteredProcedures(results);
      setSelectedCategory(null);
    } else {
      setFilteredProcedures([]);
    }
  }, [searchQuery]);

  // X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng ƒë·∫øn danh m·ª•c
  const handleCategoryClick = (categoryId) => {
    setSearchQuery('');
    
    if (selectedCategory === categoryId) {
      // N·∫øu nh·∫•p v√†o danh m·ª•c ƒëang ƒë∆∞·ª£c ch·ªçn, h·ªßy ch·ªçn
      setSelectedCategory(null);
      navigate('/procedures');
    } else {
      // Ch·ªçn danh m·ª•c m·ªõi
      setSelectedCategory(categoryId);
      navigate(`/procedures?category=${categoryId}`);
      
      // Cu·ªôn trang xu·ªëng ph·∫ßn danh s√°ch th·ªß t·ª•c
      setTimeout(() => {
        document.getElementById('all-procedures')?.scrollIntoView({ behavior: 'smooth' });
      }, 100);
    }
  };

  // X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng ƒë·∫øn chi ti·∫øt th·ªß t·ª•c
  const handleProcedureClick = (categoryId, procedureId) => {
    navigate(`/procedures/${procedureId}`);
  };

  // X·ª≠ l√Ω t·∫°o y√™u c·∫ßu
  const handleCreateRequest = (procedureInfo) => {
    if (isAuthenticated) {
      navigate('/citizen/requests/new', { 
        state: { procedureType: procedureInfo.id, procedureName: procedureInfo.name } 
      });
    } else {
      navigate('/auth/login', { 
        state: { 
          redirectTo: '/citizen/requests/new',
          procedureType: procedureInfo.id,
          procedureName: procedureInfo.name
        } 
      });
    }
  };

  // L·∫•y t·∫•t c·∫£ th·ªß t·ª•c t·ª´ t·∫•t c·∫£ c√°c danh m·ª•c
  const getAllProcedures = () => {
    const allProcedures = [];
    Object.keys(procedures).forEach(category => {
      // N·∫øu ƒë√£ ch·ªçn danh m·ª•c, ch·ªâ hi·ªÉn th·ªã th·ªß t·ª•c trong danh m·ª•c ƒë√≥
      if (selectedCategory && category !== selectedCategory) {
        return;
      }
      
      procedures[category].forEach(procedure => {
        allProcedures.push({
          ...procedure,
          category
        });
      });
    });
    return allProcedures;
  };

  return (
    <Box sx={{ py: 6, bgcolor: '#f9fafb' }}>
      <Container maxWidth="lg">
        {/* Banner th√¥ng b√°o */}
        <Paper 
          elevation={0} 
          sx={{
            p: 3,
            mb: 4,
            borderRadius: 3,
            display: 'flex',
            alignItems: 'center',
            backgroundColor: '#e8f5e9',
            border: '1px solid #a5d6a7'
          }}
        >
          <VerifiedIcon color="success" sx={{ fontSize: 40, mr: 2 }} />
          <Box>
            <Typography variant="h6" fontWeight="bold" gutterBottom>
              Th√¥ng b√°o v·ªÅ d·ªãch v·ª• c√¥ng
            </Typography>
            <Typography variant="body1">
              T·ª´ ng√†y 01/06/2023, ng∆∞·ªùi d√¢n c√≥ th·ªÉ ƒëƒÉng k√Ω t·∫•t c·∫£ th·ªß t·ª•c h√†nh ch√≠nh tr√™n h·ªá th·ªëng blockchain, 
              gi√∫p gi·∫£m th·ªùi gian ƒëi l·∫°i v√† ƒë·∫£m b·∫£o t√≠nh x√°c th·ª±c.
            </Typography>
          </Box>
        </Paper>

        {/* Header */}
        <Box sx={{ mb: 6, textAlign: 'center' }}>
          <Typography 
            variant={isMobile ? "h4" : "h3"} 
            component="h1" 
            fontWeight="bold" 
            gutterBottom
            sx={{ 
              background: 'linear-gradient(45deg, #1976d2 30%, #2196f3 90%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent'
            }}
          >
            Th·ªß t·ª•c h√†nh ch√≠nh c√¥ng
          </Typography>
          <Typography variant="h6" color="text.secondary" sx={{ mb: 4, maxWidth: 800, mx: 'auto' }}>
            T·∫•t c·∫£ c√°c th·ªß t·ª•c h√†nh ch√≠nh ƒë∆∞·ª£c x√°c th·ª±c b·∫±ng c√¥ng ngh·ªá Blockchain,
            gi√∫p ng∆∞·ªùi d√¢n th·ª±c hi·ªán nhanh ch√≥ng, minh b·∫°ch v√† an to√†n
          </Typography>
          
          {/* Search Box */}
          <Paper
            component="form"
            sx={{
              p: '4px 8px',
              display: 'flex',
              alignItems: 'center',
              maxWidth: 700,
              mx: 'auto',
              borderRadius: 3,
              boxShadow: '0 4px 14px rgba(0,0,0,0.1)'
            }}
          >
            <TextField
              fullWidth
              placeholder="T√¨m ki·∫øm th·ªß t·ª•c h√†nh ch√≠nh..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              variant="standard"
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon color="primary" />
                  </InputAdornment>
                ),
                disableUnderline: true,
              }}
              sx={{ ml: 1 }}
            />
          </Paper>

          {/* K·∫øt qu·∫£ t√¨m ki·∫øm */}
          {searchQuery && (
            <Paper sx={{ mt: 2, p: 2, maxWidth: 700, mx: 'auto', maxHeight: 400, overflow: 'auto' }}>
              <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 2 }}>
                K·∫øt qu·∫£ t√¨m ki·∫øm: {filteredProcedures.length} th·ªß t·ª•c
              </Typography>
              {filteredProcedures.length > 0 ? (
                <List>
                  {filteredProcedures.map((procedure) => (
                    <ListItem 
                      key={procedure.id}
                      button
                      divider
                      onClick={() => handleProcedureClick(procedure.category, procedure.id)}
                    >
                      <ListItemIcon>
                        <DocumentIcon color="primary" />
                      </ListItemIcon>
                      <ListItemText 
                        primary={procedure.name}
                        secondary={procedure.description}
                      />
                      <IconButton edge="end">
                        <ArrowIcon fontSize="small" />
                      </IconButton>
                    </ListItem>
                  ))}
                </List>
              ) : (
                <Typography variant="body1" color="text.secondary" sx={{ textAlign: 'center', py: 2 }}>
                  Kh√¥ng t√¨m th·∫•y th·ªß t·ª•c n√†o ph√π h·ª£p v·ªõi "{searchQuery}"
                </Typography>
              )}
            </Paper>
          )}
        </Box>

        {/* C√°c nh√≥m th·ªß t·ª•c h√†nh ch√≠nh */}
        <Box sx={{ mb: 6 }}>
          <Typography variant="h5" component="h2" fontWeight="bold" sx={{ mb: 3 }}>
            Nh√≥m th·ªß t·ª•c h√†nh ch√≠nh
          </Typography>
          <Grid container spacing={3}>
            {procedureGroups.map((group) => (
              <Grid item xs={6} sm={4} md={4} key={group.id}>
                <Card 
                  sx={{ 
                    height: '100%',
                    borderRadius: 4,
                    transition: 'transform 0.2s, box-shadow 0.2s',
                    cursor: 'pointer',
                    '&:hover': {
                      transform: 'translateY(-5px)',
                      boxShadow: '0 10px 20px rgba(0,0,0,0.1)'
                    },
                    ...(selectedCategory === group.id && {
                      boxShadow: `0 0 0 2px ${group.color}, 0 10px 20px rgba(0,0,0,0.1)`,
                      transform: 'translateY(-5px)',
                    })
                  }}
                  onClick={() => handleCategoryClick(group.id)}
                >
                  <CardContent sx={{ p: 3, bgcolor: group.bgColor }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Avatar 
                        sx={{ 
                          bgcolor: group.color,
                          color: 'white',
                          width: 60,
                          height: 60,
                          mr: 2
                        }}
                      >
                        {group.icon}
                      </Avatar>
                      <Typography variant="h6" fontWeight="bold">
                        {group.name}
                      </Typography>
                    </Box>
                    <Box sx={{ mt: 2, display: 'flex', justifyContent: 'flex-end' }}>
                      <Button 
                        endIcon={<ArrowIcon />}
                        sx={{ 
                          color: group.color,
                          '&:hover': {
                            backgroundColor: `${group.color}10`
                          }
                        }}
                      >
                        {selectedCategory === group.id ? 'ƒêang xem' : 'Xem t·∫•t c·∫£'}
                      </Button>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            ))}
          </Grid>
        </Box>

        {/* Th·ªß t·ª•c ph·ªï bi·∫øn */}
        <Box sx={{ mb: 6 }}>
          <Typography variant="h5" component="h2" fontWeight="bold" sx={{ mb: 3 }}>
            Th·ªß t·ª•c ph·ªï bi·∫øn
          </Typography>
          <Grid container spacing={3}>
            {popularProcedures.map((procedure) => (
              <Grid item xs={12} sm={6} md={4} key={procedure.id}>
                <Paper 
                  sx={{
                    p: 3,
                    height: '100%',
                    borderRadius: 4,
                    display: 'flex',
                    flexDirection: 'column',
                    cursor: 'pointer',
                    transition: 'transform 0.2s, box-shadow 0.2s',
                    '&:hover': {
                      transform: 'translateY(-5px)',
                      boxShadow: '0 10px 20px rgba(0,0,0,0.1)'
                    }
                  }}
                >
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Avatar 
                      sx={{ 
                        bgcolor: procedureGroups.find(g => g.id === procedure.category)?.bgColor || '#f5f5f5',
                        width: 48,
                        height: 48,
                        mr: 2,
                        fontSize: '1.5rem'
                      }}
                    >
                      {procedure.icon}
                    </Avatar>
                    <Typography variant="h6" fontWeight="medium">
                      {procedure.name}
                    </Typography>
                  </Box>
                  
                  <Divider sx={{ my: 2 }} />
                  
                  <Box sx={{ mt: 'auto', display: 'flex', justifyContent: 'space-between' }}>
                    <Button
                      variant="text"
                      color="primary"
                      startIcon={<InfoIcon />}
                      onClick={() => handleProcedureClick(procedure.category, procedure.id)}
                    >
                      Chi ti·∫øt
                    </Button>
                    
                    <Button
                      variant="contained"
                      color="primary"
                      endIcon={<ArrowIcon />}
                      onClick={() => {
                        const proc = procedures[procedure.category].find(p => p.id === procedure.id);
                        if (proc) handleCreateRequest(proc);
                      }}
                      sx={{ borderRadius: 2 }}
                    >
                      T·∫°o y√™u c·∫ßu
                    </Button>
                  </Box>
                </Paper>
              </Grid>
            ))}
          </Grid>
        </Box>
        
        {/* Danh s√°ch t·∫•t c·∫£ th·ªß t·ª•c */}
        <Box sx={{ mb: 6 }} id="all-procedures">
          <Typography variant="h5" component="h2" fontWeight="bold" sx={{ mb: 3, display: 'flex', alignItems: 'center' }}>
            <AssignmentIcon sx={{ mr: 1 }} />
            {selectedCategory 
              ? `Th·ªß t·ª•c h√†nh ch√≠nh: ${procedureGroups.find(g => g.id === selectedCategory)?.name || 'T·∫•t c·∫£'}`
              : 'T·∫•t c·∫£ th·ªß t·ª•c h√†nh ch√≠nh'}
            {selectedCategory && (
              <Button 
                variant="text" 
                size="small" 
                onClick={() => setSelectedCategory(null)}
                sx={{ ml: 2 }}
              >
                Xem t·∫•t c·∫£
              </Button>
            )}
          </Typography>
          
          <Grid container spacing={3}>
            {getAllProcedures().map((procedure) => (
              <Grid item xs={12} sm={6} md={4} key={`${procedure.category}-${procedure.id}`}>
                <Card 
                  sx={{ 
                    height: '100%',
                    borderRadius: 4,
                    display: 'flex',
                    flexDirection: 'column'
                  }}
                >
                  <CardContent sx={{ flexGrow: 1, p: 3 }}>
                    <Typography variant="h6" component="h3" fontWeight="bold" gutterBottom sx={{ display: 'flex', alignItems: 'center', flexWrap: 'wrap' }}>
                      <span style={{ marginRight: '8px' }}>{procedure.name}</span>
                      {procedure.blockchainVerified && (
                        <Chip 
                          icon={<VerifiedIcon />}
                          label="Blockchain"
                          size="small"
                          color="primary"
                          sx={{ fontSize: '0.75rem' }}
                        />
                      )}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" paragraph>
                      {procedure.description}
                    </Typography>
                    
                    <Divider sx={{ my: 2 }} />
                    
                    <List dense>
                      <ListItem>
                        <ListItemIcon sx={{ minWidth: 36 }}>
                          <TimeIcon fontSize="small" color="action" />
                        </ListItemIcon>
                        <ListItemText 
                          primary="Th·ªùi gian x·ª≠ l√Ω" 
                          secondary={procedure.processingTime}
                          primaryTypographyProps={{ variant: 'body2', fontWeight: 'medium' }}
                        />
                      </ListItem>
                    </List>
                  </CardContent>
                  
                  <CardActions sx={{ p: 2, pt: 0, justifyContent: 'space-between' }}>
                    <Button
                      size="small"
                      color="primary"
                      startIcon={<InfoIcon />}
                      onClick={() => handleProcedureClick(procedure.category, procedure.id)}
                    >
                      Chi ti·∫øt
                    </Button>
                    
                    <Button
                      size="small"
                      variant="contained"
                      color="primary"
                      endIcon={<ArrowIcon />}
                      onClick={() => handleCreateRequest(procedure)}
                      sx={{ borderRadius: 2 }}
                    >
                      T·∫°o y√™u c·∫ßu
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
            
            {getAllProcedures().length === 0 && selectedCategory && (
              <Box sx={{ width: '100%', textAlign: 'center', py: 5 }}>
                <Typography variant="h6" color="text.secondary" gutterBottom>
                  Kh√¥ng c√≥ th·ªß t·ª•c n√†o trong danh m·ª•c n√†y
                </Typography>
                <Button 
                  variant="contained"
                  color="primary"
                  onClick={() => setSelectedCategory(null)}
                  sx={{ mt: 2 }}
                >
                  Xem t·∫•t c·∫£ th·ªß t·ª•c
                </Button>
              </Box>
            )}
          </Grid>
        </Box>
        
        {/* CTA Section */}
        {!isAuthenticated && (
          <Box 
            sx={{ 
              mt: 8, 
              mb: 4, 
              p: 4,
              borderRadius: 4,
              background: 'linear-gradient(45deg, #1976d2 30%, #2196f3 90%)',
              color: 'white',
              textAlign: 'center'
            }}
          >
            <Typography variant="h4" fontWeight="bold" gutterBottom>
              B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng d·ªãch v·ª• h√†nh ch√≠nh s·ªë
            </Typography>
            <Typography variant="body1" sx={{ maxWidth: 800, mx: 'auto', mb: 4, opacity: 0.9 }}>
              ƒêƒÉng k√Ω t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• h√†nh ch√≠nh hi·ªán ƒë·∫°i, ti·∫øt ki·ªám th·ªùi gian v√† chi ph√≠ ƒëi l·∫°i. 
              M·ªçi th·ªß t·ª•c ƒë·ªÅu ƒë∆∞·ª£c x√°c th·ª±c b·∫±ng c√¥ng ngh·ªá Blockchain ƒë·∫£m b·∫£o t√≠nh minh b·∫°ch v√† an to√†n.
            </Typography>
            <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, flexWrap: 'wrap' }}>
              <Button 
                variant="contained" 
                color="secondary"
                size="large"
                component={Link}
                to="/auth/register"
                sx={{ 
                  px: 4, 
                  py: 1.5, 
                  borderRadius: 2,
                  fontWeight: 'bold',
                  fontSize: '1rem',
                  backgroundColor: 'white',
                  color: '#1976d2',
                  '&:hover': {
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                  }
                }}
              >
                ƒêƒÉng k√Ω ngay
              </Button>
              <Button 
                variant="outlined"
                color="inherit"
                size="large"
                component={Link}
                to="/auth/login"
                sx={{ 
                  px: 4, 
                  py: 1.5, 
                  borderRadius: 2,
                  fontWeight: 'bold',
                  fontSize: '1rem',
                  borderColor: 'white',
                  '&:hover': {
                    borderColor: 'white',
                    backgroundColor: 'rgba(255, 255, 255, 0.1)',
                  }
                }}
              >
                ƒêƒÉng nh·∫≠p
              </Button>
            </Box>
          </Box>
        )}
      </Container>
    </Box>
  );
};

export default PublicProceduresPage; 